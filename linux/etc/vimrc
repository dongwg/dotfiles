" /etc/vimrc (configuration file for vim only)
" author: Klaus Franken     <kfr@suse.de>
" author: Werner Fink       <werner@suse.de> 
" author: Florian La Roche  <florian@suse.de> 
" version: 00/01/20
" commented lines start with `"'
"

" ================= Begin of Vundle stuff =================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/vimfiles/bundle')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


let s:python_ver = 0
silent! python import sys, vim;
\ vim.command("let s:python_ver="+"".join(map(str,sys.version_info[0:3])))
" Try again with python3
if s:python_ver < 260
silent! py3 import sys, vim;
\ vim.command("let s:python_ver="+"".join(map(str,sys.version_info[0:3])))
endif

" Ultisnips
if (has('python') || has('python3')) && s:python_ver >= 260
  Plugin 'SirVer/ultisnips'
  Plugin 'honza/vim-snippets'

  " Powerline
  " Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
endif

Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Solarized color 
Plugin 'altercation/vim-colors-solarized' 

" CUDA syntax 
Plugin 'cudajinja.vim'

" Markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Indentline
Plugin 'Yggdroot/indentLine'

" taglist 
Plugin 'taglist.vim'

" autotag
Plugin 'craigemery/vim-autotag'

" YouCompleteMe - requires vim 7.3.584+
Plugin 'Valloric/YouCompleteMe'

" OmniCppComplete
"Plugin 'OmniCppComplete'

" jedi-vim for a better Python autocompletion
Plugin 'davidhalter/jedi-vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" ================ End of Vundle stuff ============= 

" CUDA
"au BufNewFile,BufRead *.cu set ft=cu
"au BufNewFile,BufRead *.cuh set ft=cu


" colorscheme evening
" colorscheme evening
" colorscheme desert
" colorscheme marklar
let g:solarized_bold=0
let g:solarized_contrast = "low"
if $TERM == "xterm-256color"
  set t_Co=256
  let g:solarized_tercolors=256
else
  set t_Co=16
  let g:solarized_termcolors=16
endif

colorscheme solarized
if has('gui_running')
  set background=light
else
  set background=dark
endif

" Powerline related
set laststatus=2 " Always display the statusline in all windows
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

"set guifont=Liberation\ Mono\ for\ Powerline\ 10
" airline related
let g:airline#extensions#tabline#enabled=1
let g:airline_theme             = 'powerlineish'
if !has('gui_running')
    let g:airline_powerline_fonts = 1
endif
set laststatus=2



" taglist related
map <F3> :silent! Tlist<CR> 
let Tlist_Ctags_Cmd='ctags-exuberant' 
let Tlist_Use_Right_Window=1 
let Tlist_Show_One_File=0 
let Tlist_File_Fold_Auto_Close=1 
let Tlist_Exit_OnlyWindow=1 
let Tlist_Process_File_Always=0 
let Tlist_Inc_Winwidth=0
set tags+=/vega/xp/dev/wdong/tags/cpp.tags
set tags+=/vega/xp/dev/wdong/tags/gl.tags
set tags+=/vega/xp/dev/wdong/tags/qt4.tags
set tags+=/vega/xp/dev/wdong/tags/vega.tags
set tags+=/vega/xp/dev/wdong/tags/python.tags


" Buffer related
:nnoremap <C-n> :bnext<CR>
:nnoremap <C-p> :bprevious<CR> 
:nnoremap <F5> :buffers<CR>:buffer<Space>

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" set the tab width = 4 spaces
set tabstop=4
set shiftwidth=4


"set softtabstop=4
set expandtab
" But for Makefiles, don't expand tab
au BufNewFile,BufRead [mM]akefile setlocal noexpandtab
" gnu open source style editing
"set cinoptions=>2,n-2,{0,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1 shiftwidth=2 tabstop=8
"set cinoptions=>2,n0,:2,=2,g0,h2,p2,t0,(0,u0,w1,m1 shiftwidth=2 tabstop=8

au Filetype * set cinoptions=>2,n0,:2,=2,g0,h2,p2,t0,(0,u0,w1,m1| set sw=2| set ts=8
au Filetype python set tabstop=4| set shiftwidth=4
au Filetype fortran set tabstop=3| set shiftwidth=3
au BufEnter *.py set sw=4 ts=4

" automatically indent lines (default)
set noautoindent
set smartindent

" Python configuration conforming to PEP8 standards
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \set fileformat=unix

" Web development
au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set  shiftwidth=2

" Fortran related settings
let s:extfname = expand("%:e")
if s:extfname ==? "f90"
  let fortran_free_source=1
  unlet! fortran_fixed_source
endif
if s:extfname ==? "f"
  let fortran_fixed_source=1
  unlet! fortran_free_source
endif
let fortran_do_enddo=1
let fortran_more_precise=1
let fortran_fold=1

" enable syntax highlighting
syntax on

" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za


" maximize window when using split structure
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
set wmh=0

" Toggle paste mode using F11, useful when paste from outside Vim
" 'set paste' will turn off auto-indention
set pastetoggle=<F11>


" backspacing over indention, end-of-line and start-of-line
inoremap  
set backspace=indent,eol,start

" Settings for Python Snippets. Use ctrl-tab instead of tab. The latter
" conflicts with YouCompleteMe
let g:ultisnips_python_style="doxygen"
let g:ultisnips_python_quoting_style="single"
"let g:UltiSnipsExpandTrigger="<c-tab>"
"let g:UltiSnipsListSnippets="<c-s-tab>"

" disable tab key for YouCompleteMe. Otherwise, it conflicts with ultisnips
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
" Other handy settings for YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
"map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_max_diagnostics_to_display=1000
let g:ycm_confirm_extra_conf=0
let g:ycm_log_level='debug'
" Goto definition with F12
map <F12> :YcmCompleter GoTo<CR>

" select case-insenitiv search (not default)
" set ignorecase

" hilight search matches
set hlsearch
nmap <F2> :nohlsearch<CR>

" turn on incremental searches
set incsearch

" show cursor line and column in the status line
set ruler
"set cursorline
"set cursorcolumn
"hi CursorLine cterm=NONE ctermbg=237 ctermfg=NONE guibg=darkred guifg=white
"hi CursorColumn cterm=NONE ctermbg=235 ctermfg=NONE guibg=darkred guifg=white

" show matching brackets
set showmatch

" display mode INSERT/REPLACE/...
set showmode

" changes special characters in search patterns (default)
" set magic

" Required to be able to use keypad keys and map missed escape sequences
set esckeys

" get easier to use and more user friendly vim defaults
" CAUTION: This option breaks some vi compatibility. 
"          Switch it off if you prefer real vi compatibility
set nocompatible

" Complete longest common string, then each full match
" enable this for bash compatible behaviour
" set wildmode=longest,full

" Try to get the correct main terminal type
if &term =~ "xterm"
    let myterm = "xterm"
else
    let myterm =  &term
endif
let myterm = substitute(myterm, "cons[0-9][0-9].*$",  "linux", "")
let myterm = substitute(myterm, "vt1[0-9][0-9].*$",   "vt100", "")
let myterm = substitute(myterm, "vt2[0-9][0-9].*$",   "vt220", "")
let myterm = substitute(myterm, "\\([^-]*\\)[_-].*$", "\\1",   "")

" Here we define the keys of the NumLock in keyboard transmit mode of xterm
" which misses or hasn't activated Alt/NumLock Modifiers.  Often not defined
" within termcap/terminfo and we should map the character printed on the keys.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <ESC>Oo  :
    map! <ESC>Oj  *
    map! <ESC>Om  -
    map! <ESC>Ok  +
    map! <ESC>Ol  ,
    map! <ESC>OM  
    map! <ESC>Ow  7
    map! <ESC>Ox  8
    map! <ESC>Oy  9
    map! <ESC>Ot  4
    map! <ESC>Ou  5
    map! <ESC>Ov  6
    map! <ESC>Oq  1
    map! <ESC>Or  2
    map! <ESC>Os  3
    map! <ESC>Op  0
    map! <ESC>On  .
    " keys in normal mode
    map <ESC>Oo  :
    map <ESC>Oj  *
    map <ESC>Om  -
    map <ESC>Ok  +
    map <ESC>Ol  ,
    map <ESC>OM  
    map <ESC>Ow  7
    map <ESC>Ox  8
    map <ESC>Oy  9
    map <ESC>Ot  4
    map <ESC>Ou  5
    map <ESC>Ov  6
    map <ESC>Oq  1
    map <ESC>Or  2
    map <ESC>Os  3
    map <ESC>Op  0
    map <ESC>On  .
endif

" xterm but without activated keyboard transmit mode
" and therefore not defined in termcap/terminfo.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <Esc>[H  <Home>
    map! <Esc>[F  <End>
    " Home/End: older xterms do not fit termcap/terminfo.
    map! <Esc>[1~ <Home>
    map! <Esc>[4~ <End>
    " Up/Down/Right/Left
    map! <Esc>[A  <Up>
    map! <Esc>[B  <Down>
    map! <Esc>[C  <Right>
    map! <Esc>[D  <Left>
    " KP_5 (NumLock off)
    map! <Esc>[E  <Insert>
    " PageUp/PageDown
    map <ESC>[5~ <PageUp>
    map <ESC>[6~ <PageDown>
    map <ESC>[5;2~ <PageUp>
    map <ESC>[6;2~ <PageDown>
    map <ESC>[5;5~ <PageUp>
    map <ESC>[6;5~ <PageDown>
    " keys in normal mode
    map <ESC>[H  0
    map <ESC>[F  $
    " Home/End: older xterms do not fit termcap/terminfo.
    map <ESC>[1~ 0
    map <ESC>[4~ $
    " Up/Down/Right/Left
    map <ESC>[A  k
    map <ESC>[B  j
    map <ESC>[C  l
    map <ESC>[D  h
    " KP_5 (NumLock off)
    map <ESC>[E  i
    " PageUp/PageDown
    map <ESC>[5~ 
    map <ESC>[6~ 
    map <ESC>[5;2~ 
    map <ESC>[6;2~ 
    map <ESC>[5;5~ 
    map <ESC>[6;5~ 
endif

" xterm/kvt but with activated keyboard transmit mode.
" Sometimes not or wrong defined within termcap/terminfo.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <Esc>OH <Home>
    map! <Esc>OF <End>
    map! <ESC>O2H <Home>
    map! <ESC>O2F <End>
    map! <ESC>O5H <Home>
    map! <ESC>O5F <End>
    " Cursor keys which works mostly
    " map! <Esc>OA <Up>
    " map! <Esc>OB <Down>
    " map! <Esc>OC <Right>
    " map! <Esc>OD <Left>
    map! <Esc>[2;2~ <Insert>
    map! <Esc>[3;2~ <Delete>
    map! <Esc>[2;5~ <Insert>
    map! <Esc>[3;5~ <Delete>
    map! <Esc>O2A <PageUp>
    map! <Esc>O2B <PageDown>
    map! <Esc>O2C <S-Right>
    map! <Esc>O2D <S-Left>
    map! <Esc>O5A <PageUp>
    map! <Esc>O5B <PageDown>
    map! <Esc>O5C <S-Right>
    map! <Esc>O5D <S-Left>
    " KP_5 (NumLock off)
    map! <Esc>OE <Insert>
    " keys in normal mode
    map <ESC>OH  0
    map <ESC>OF  $
    map <ESC>O2H  0
    map <ESC>O2F  $
    map <ESC>O5H  0
    map <ESC>O5F  $
    " Cursor keys which works mostly
    " map <ESC>OA  k
    " map <ESC>OB  j
    " map <ESC>OD  h
    " map <ESC>OC  l
    map <Esc>[2;2~ i
    map <Esc>[3;2~ x
    map <Esc>[2;5~ i
    map <Esc>[3;5~ x
    map <ESC>O2A  ^B
    map <ESC>O2B  ^F
    map <ESC>O2D  b
    map <ESC>O2C  w
    map <ESC>O5A  ^B
    map <ESC>O5B  ^F
    map <ESC>O5D  b
    map <ESC>O5C  w
    " KP_5 (NumLock off)
    map <ESC>OE  i
endif

if myterm == "linux"
    " keys in insert/command mode.
    map! <Esc>[G  <Insert>
    " KP_5 (NumLock off)
    " keys in normal mode
    " KP_5 (NumLock off)
    map <ESC>[G  i
endif

" This escape sequence is the well known ANSI sequence for
" Remove Character Under The Cursor (RCUTC[tm])
map! <Esc>[3~ <Delete>
map  <ESC>[3~    x

" Only do this part when compiled with support for autocommands. 
if has("autocmd") 
  " When editing a file, always jump to the last known cursor position. 
  " Don't do it when the position is invalid or when inside an event handler 
  " (happens when dropping a file on gvim). 
  autocmd BufReadPost * 
    \ if line("'\"") > 0 && line("'\"") <= line("$") | 
    \   exe "normal g`\"" | 
    \ endif 
 
endif " has("autocmd")

" Changed default required by SuSE security team
set modelines=0

" Change the menu colors for omni completion
hi Pmenu        cterm=none ctermfg=White     ctermbg=Blue
hi PmenuSel     cterm=none ctermfg=Black     ctermbg=DarkGreen
hi PmenuSbar    cterm=none ctermfg=none      ctermbg=Green
hi PmenuThumb   cterm=none ctermfg=DarkGreen ctermbg=DarkGreen

" get easier to use and more user friendly vim defaults
" /etc/vimrc ends here
